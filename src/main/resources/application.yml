spring:
    datasource:
        url: jdbc:postgresql://ec2-52-2-6-71.compute-1.amazonaws.com/d5mcjg2rn43ilh
        username: dwoafcpdxawyyi
        password: 5f1aad4238e032d83332aa1b7a7f839c480cf7df1b453213397b9ee4e2c45088

    jpa:
        show-sql: false
        hibernate:
            ddl-auto: update
        properties:
            hibernate:
              default_schema: test
              dialect: org.hibernate.dialect.PostgreSQLDialect
    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 359507725744-hr5bis94nirrpks9mtuvlt4e58mq7ubq.apps.googleusercontent.com
              clientSecret: vDVPwaD52MhsAU_NZwEG9BKf
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - profile
            facebook:
              clientId: 317205032811135
              clientSecret: fe94d44c985caafe2130de7a38e38740
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - public_profile
          provider:
            facebook:
              authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
              tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
              userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect